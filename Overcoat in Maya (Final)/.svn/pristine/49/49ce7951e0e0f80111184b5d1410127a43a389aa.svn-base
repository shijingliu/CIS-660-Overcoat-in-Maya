//-
// ==========================================================================
// Copyright 1995,2006,2008 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk
// license agreement provided at the time of installation or download,
// or which otherwise accompanies this software in either electronic 
// or hard copy form.
// ==========================================================================
//+

#include <maya/MIOStream.h>
#include <maya/MRenderView.h>
#include <maya/M3dView.h>
#include <math.h>
#include "OverCoatCmd.h"

#include "vec.h"
#include <vector>

#include <maya/MArgList.h>   
#include <maya/MTime.h>
#include <maya/MMatrix.h>
#include <maya/MFnMesh.h>
#include <maya/MFloatMatrix.h>
#include <maya/MFnMeshData.h>
#include <maya/MPointArray.h>
#include <maya/MItDependencyNodes.h>
#include <maya/MItDag.h>
#include <maya/MFnCamera.h>
#include <maya/MFnTransform.h>
#include <maya/MUintArray.h>
#include <maya/MFloatPoint.h>
#include <maya/MDagPath.h>
#include <maya/MFnNurbsCurve.h>
#include <maya/MItCurveCV.h>
#include <maya/MGlobal.h>

#define Image_Height 1600
#define Image_Width 1200 
#define Sample_Points 1000


MStatus OverCoatCmd::doIt( const MArgList& args )
{
        MStatus stat = MS::kSuccess;

		MGlobal::displayInfo(MString("Creating Overcoat Node"));

		int thickNess = 1; 
		double weight = 1.0;   
		double strokeOffset = 200.0f; 
		double transparency = 1; 
		double level = 1;
		double splineColorRed = 255; 
		double splineColorGreen = 255; 
		double splineColorBlue = 255; 

		int brushflag = 0; 

		//loop through the command line arguments        
		for(int i = 0; i < args.length(); ++i)
		{
			//check for a valid arguments 
			if(args.asString(i, &stat) == "-thick")
			{
				MString para1 = args.asString(++i); 
				thickNess = para1.asDouble(); 
			}
			if(args.asString(i, &stat) == "-weight")
			{
				MString para2 = args.asString(++i);
				weight = para2.asDouble();
			}
			if(args.asString(i, &stat) == "-strok")
			{
				MString para3 = args.asString(++i);
				strokeOffset = para3.asDouble();
			}
			if(args.asString(i, &stat) == "-trans")
			{
				MString para4 = args.asString(++i);
				transparency = para4.asDouble(); 
			}
			if(args.asString(i, &stat) == "-level")
			{
				MString para5 = args.asString(++i);
				level = para5.asDouble(); 
			}
			if(args.asString(i, &stat) == "-red")    
			{
				MString para6 = args.asString(++i);
				splineColorRed = para6.asDouble();       
			}
			if(args.asString(i, &stat) == "-green")           
			{      
				MString para7 = args.asString(++i);   
				splineColorGreen = para7.asDouble();          
			}
			if(args.asString(i, &stat) == "-blue")
			{
				MString para8 = args.asString(++i);
				splineColorBlue = para8.asDouble(); 
			}   
		}            
		      
	/*	cout<<"red:"<<splineColorRed<<endl;
		cout<<"green:"<<splineColorGreen<<endl;
		cout<<"blue:"<<splineColorBlue<<endl;        */

		/*cout<<"transparency:"<<transparency<<endl;
		cout<<"strokeOffset:"<<strokeOffset<<endl;*/

        // Check if the render view exists. It should always exist, unless                     
        // Maya is running in batch mode.
        //
		   //get the view direction and eye position      
			MFloatVector view_dir; 
			MFloatPoint eye_pos;
			MItDag it1(MItDag::kDepthFirst, MFn::kCamera); 
			MFloatMatrix projectionMat;        

			//go through all the camera in the maya and only execute the perspective camera   
			for ( ; !it1.isDone(); it1.next() )
			{   
				MDagPath campath;   
				it1.getPath(campath); 
				MFnCamera fn(campath);
	
				MString persp = "perspShape"; 
				if(fn.name()==persp)
				{
					view_dir=MFloatVector(fn.viewDirection(MSpace::kWorld));
					eye_pos=MFloatPoint(fn.eyePoint(MSpace::kWorld)); 
				}
			} 

			cout<<"camera:"<<eye_pos.x<<","<<eye_pos.y<<","<<eye_pos.z<<endl;
			cout<<"view direction:"<<view_dir.x<<","<<view_dir.y<<","<<view_dir.z<<endl;

			MItDag it(MItDag::kDepthFirst, MFn::kNurbsCurve);

			int index = 0; 
			vector <int> numCVs(1000); 
			vector <MPointArray> splines (100); 
			for (int i = 0; i < 100; i++)
			{
				splines[i].setLength(1000000); 
			}

			vector <MPointArray> splinesPara (100); 
			for (int i = 0; i < 100; i++)
			{
				splinesPara[i].setLength(1000000); 
			}

			MPointArray StartPoint (100, MPoint::origin); 
			MPointArray EndPoint (100, MPoint::origin); 
			double StartPara[100]; 
			double EndPara[100]; 
			for (int i = 0; i < 100; i++)
			{
				StartPara[i] = 0.0; 
				EndPara[i] = 0.0; 
			}

			int array[10]; 

			//go through all the spline (CVcurves) in the maya view and record all of them      
			for ( ; !it.isDone(); it.next() )   
			{
				MDagPath curvepath;
				it.getPath(curvepath);        
				//definition for curves      
				MFnNurbsCurve curveFn (curvepath); 
				numCVs[index] = curveFn.numCVs();

				curveFn.getCVs (splines[index], MSpace::kObject);
				int LEN = splines[index].length();
		
				StartPoint[index] = splines[index][0];
				EndPoint[index] = splines[index][LEN-1]; 

				curveFn.getParamAtPoint(StartPoint[index], StartPara[index], MSpace::kObject); 
				curveFn.getParamAtPoint(EndPoint[index], EndPara[index], MSpace::kObject); 

				int arrIndex = 0;    
				for (double u = StartPara[index]; u <=EndPara[index]; u = u+0.001)
				{
					MPoint CurrentPoint;    

					curveFn.getPointAtParam(u, CurrentPoint, MSpace::kObject); 
					splinesPara[index][arrIndex].x= CurrentPoint.x; 
					splinesPara[index][arrIndex].y= CurrentPoint.y;     
					splinesPara[index][arrIndex].z= CurrentPoint.z; 
					arrIndex++;   
				}   
			index++; 
		   }  

		cout<<"num of cv curves:"<< index <<endl; 

	    double totalLength = strokeOffset;

		//start to render in the maya render view port.     
        if (!MRenderView::doesRenderEditorExist())
        {
                displayError( 
                        "Cannot renderViewInteractiveRender in batch render mode.\n"
                        "Run in interactive mode, so that the render editor exists." );
                return MS::kFailure;
        }

        if (!MRenderView::doesRenderEditorExist())
        {
                displayError( 
                        "Cannot renderViewInteractiveRender in batch render mode.\n"
                        "Run in interactive mode, so that the render editor exists." );
                return MS::kFailure;
        }

		MRenderView::startRender(Image_Height, Image_Width, false, false);
		RV_PIXEL* pixels = new RV_PIXEL[Image_Height*Image_Width];
		int indexPixel = 0; 

		//initialize the background color with white      
		for (int i = 0;  i < Image_Height; i++)
		{
			for (int j = 0; j< Image_Width; j++)
			{
				pixels[indexPixel].r = 255;
				pixels[indexPixel].g = 255;
				pixels[indexPixel].b = 255;   
				pixels[indexPixel].a = 255;
                indexPixel++;
			}
		}

		//project each points to the plane       
		for(int i = 0; i<index; i++)
		{
			for(int j = 0; j<(1000*EndPara[i]+1); j++)   
			{
				vec3 a (splinesPara[i][j].x-eye_pos.x, splinesPara[i][j].y-eye_pos.y, splinesPara[i][j].z-eye_pos.z); 
				vec3 b (view_dir.x, view_dir.y, view_dir.z);   
				double aDotb = Dot (a, b);
				vec3 projection = aDotb*b;    

				double targetLen = totalLength*a.Length()/projection.Length(); 
				vec3 finalVec = targetLen*(a.Normalize());
				vec3 finalPos = vec3 (eye_pos.x + finalVec[0], eye_pos.y + finalVec[1], eye_pos.z + finalVec[2]);  
				int xAxis = (int) (finalPos[0]+0.5); 
				int yAxis = (int) (finalPos[1]+0.5); 
		        if(((xAxis - thickNess) > -(Image_Height/2))&&((xAxis + thickNess) < (Image_Height/2)) && ((yAxis - thickNess) > -(Image_Width/2))&&((yAxis + thickNess) < (Image_Width/2)))
				{  
					for(int k = 0; k < thickNess; k++)   
					{
						int getIndex = (yAxis + k + (Image_Width/2))*Image_Height + (xAxis+(Image_Height/2));
						pixels[getIndex].r = splineColorRed*255;
						pixels[getIndex].g = splineColorGreen*255;
						pixels[getIndex].b = splineColorBlue*255;       
						pixels[getIndex].a = 255/transparency;
					}
					
				}
			}
		}  

		//update all the points in the maya render view port           
		MRenderView::updatePixels(0, Image_Height-1, 0, Image_Width-1, pixels);
        delete [] pixels;
		  //
        // Inform the Render View that we have completed rendering the entire image.    
        //
        if (MRenderView::endRender() != MS::kSuccess)
        {
                displayError( "OverCoat: error occured in endRender." );
                return MS::kFailure;
        }  


		MString cmd = MString ("RenderViewWindow;");
		MGlobal::executeCommand(cmd); 
		   

        return stat;

}